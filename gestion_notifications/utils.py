# # gestion_notifications/utils.py

# from datetime import timedelta
# from django.utils import timezone
# from pharmacien.models import Pharmacy
# from .models import Notification
# from Produit.models import Product, ProductAvailability, SearchHistory  # Assure-toi que ce mod√®le existe 
# from django.contrib.auth.models import User


#
# def generer_notifications_recherches():
#     """
#     Parcourt l'historique des recherches et notifie chaque pharmacie
#     uniquement si elle ne poss√®de pas le produit recherch√©.
#     """
#     for search in SearchHistory.objects.all():
#         try:
#             for pharmacy in Pharmacy.objects.all():
#                 # V√©rifie si la pharmacie ne poss√®de PAS ce produit recherch√©
#                 possede_produit = ProductAvailability.objects.filter(
#                     pharmacy=pharmacy,
#                     product__name__icontains=search.query
#                 ).exists()

#                 if not possede_produit:
#                     Notification.objects.get_or_create(
#                         user=pharmacy.user,
#                         pharmacy=pharmacy,
#                         type='produit_recherche',
#                         titre="Recherche de produit",
#                         message=f"Des utilisateurs ont recherch√© '{search.query}', que vous ne proposez pas.",
#                         lu=False
#                     )
#         except Exception as e:
#             print(f"Erreur dans g√©n√©ration notifications recherches : {e}")


# def notifier_admin_produits_expir√©s():
#     aujourd_hui = timezone.now().date()
#     produits_expir√©s = Product.objects.filter(date_expiration__lt=aujourd_hui, est_expire=False)

#     admin = User.objects.filter(is_staff=True).first()  # on suppose un seul admin

#     for produit in produits_expir√©s:
#         produit.est_expire = True  # marquer comme expir√© pour ne pas r√©p√©ter
#         produit.save()

#         Notification.objects.create(
#             user=admin,
#             titre="Produit expir√©",
#             message=f"Le produit **{produit.nom}** de la pharmacie **{produit.pharmacy.pharmacy_name}** est expir√©.",
#             lien=f"/admin/produits/{produit.id}/"  # lien vers une action ou info
#         )
        
# def generer_notifications_expiration():
#     """
#     G√©n√®re les notifications pour les produits arrivant √† expiration sous 30 jours.
#     """
#     aujourd_hui = timezone.now().date()
#     seuil = aujourd_hui + timedelta(days=30)

#     produits_a_expirer = Product.objects.filter(date_expiration__lte=seuil)

#     for produit in produits_a_expirer:
#         pharmacie = produit.pharmacy  # ou .created_by selon votre mod√®le
#         user = getattr(pharmacie, 'user', None)

#         if user:
#             Notification.objects.get_or_create(
#                 user=user,
#                 pharmacy=pharmacie,
#                 type='expiration_produit',
#                 titre=f"Produit bient√¥t expir√© : {produit.nom}",
#                 message=f"Le produit {produit.nom} expire le {produit.date_expiration.strftime('%d/%m/%Y')}",
#                 lu=False
#             )


# gestion_notifications/utils.py

from datetime import timedelta
from django.utils import timezone
from pharmacien.models import Pharmacy
from .models import Notification
from Produit.models import Product, ProductAvailability, SearchHistory
from users.models import User  # ton mod√®le personnalis√©
from django.db.models import Q

# üîî Fonction 1 : notifier les pharmacies qui ne poss√®dent pas un produit recherch√© r√©cemment
def generer_notifications_recherches():
    """
    Parcourt l'historique des recherches et notifie chaque pharmacie
    si elle ne poss√®de pas le produit recherch√©.
    """
    maintenant = timezone.now()
    recherches = SearchHistory.objects.all()

    for search in recherches:
        produit_recherche = search.query.strip().lower()

        for pharmacie in Pharmacy.objects.all():
            user = getattr(pharmacie, 'user', None)
            if not user:
                continue

            # V√©rifie si la pharmacie poss√®de ce produit
            possede_produit = ProductAvailability.objects.filter(
                pharmacy=pharmacie,
                product__name__icontains=produit_recherche
            ).exists()

            # Si elle ne le poss√®de pas, et pas d√©j√† notifi√©e r√©cemment
            if not possede_produit:
                notification_existante = Notification.objects.filter(
                    pharmacy=pharmacie,
                    user=user,
                    type='produit_recherche',
                    message__icontains=produit_recherche,
                    date_creation__gte=maintenant - timedelta(minutes=10)
                ).exists()

                if not notification_existante:
                    Notification.objects.create(
                        pharmacy=pharmacie,
                        user=user,
                        type='produit_recherche',
                        titre=f"Produit recherch√© : {produit_recherche}",
                        message=f"Des utilisateurs ont recherch√© '{produit_recherche}', que vous ne proposez pas.",
                        lu=False
                    )

# üîî Fonction 2 : notifier les pharmacies des produits bient√¥t expir√©s
def generer_notifications_expiration():
    """
    Notifie les pharmacies si un de leurs produits expire dans les 30 jours.
    """
    aujourd_hui = timezone.now().date()
    seuil = aujourd_hui + timedelta(days=30)

    produits = Product.objects.filter(
        date_expiration__lte=seuil,
        est_expire=False
    )

    for produit in produits:
        pharmacie = produit.pharmacy
        user = getattr(pharmacie, 'user', None)

        if user:
            Notification.objects.get_or_create(
                user=user,
                pharmacy=pharmacie,
                type='expiration_produit',
                titre=f"Produit bient√¥t expir√© : {produit.nom}",
                message=f"Le produit {produit.nom} expire le {produit.date_expiration.strftime('%d/%m/%Y')}",
                lu=False
            )

# üîî Fonction 3 : notifier admin et pharmacien si un produit est d√©j√† expir√©
def verifier_produits_expire():
    """
    V√©rifie les produits d√©j√† expir√©s et notifie l'admin et le pharmacien concern√©.
    """
    aujourd_hui = timezone.now().date()
    produits_expired = Product.objects.filter(date_expiration__lt=aujourd_hui, est_expire=False)

    for produit in produits_expired:
        produit.est_expire = True
        produit.save()

        content_type = produit.get_content_type()
        admin = User.objects.filter(is_staff=True).first()
        pharmacien_user = produit.created_by.user

        # Notification admin
        if admin:
            Notification.objects.create(
                user=admin,
                pharmacy=produit.pharmacy,
                type='expiration_produit',
                titre=f"Produit expir√© : {produit.nom}",
                message=f"Le produit '{produit.nom}' de la pharmacie '{produit.pharmacy.pharmacy_name}' est expir√©.",
                content_type=content_type,
                object_id=produit.id,
                lu=False
            )

        # Notification pharmacien
        if pharmacien_user:
            Notification.objects.create(
                user=pharmacien_user,
                pharmacy=produit.pharmacy,
                type='expiration_produit',
                titre=f"‚ö†Ô∏è Produit expir√© : {produit.nom}",
                message=f"Votre produit '{produit.nom}' est expir√© depuis le {produit.date_expiration}.",
                content_type=content_type,
                object_id=produit.id,
                lu=False
            )
            
from django.contrib.auth import get_user_model       # Pour obtenir le mod√®le User de Django

User = get_user_model() # R√©cup√®re le mod√®le d'utilisateur actif (django.contrib.auth.models.User ou votre CustomUser)

def notifier_pharmacies_non_possedant_produit(nom_produit_recherche):
    """
    Notifie les pharmaciens si un produit recherch√© par un utilisateur n'est pas en stock chez eux,
    ou si le produit n'existe pas du tout dans la base de donn√©es globale.
    """
    maintenant = timezone.now()
    
    # 1. Identifier les produits qui correspondent au nom recherch√©
    # Ceci trouve tous les IDs de produits dont le nom contient 'nom_produit_recherche'.
    produits_correspondants_ids = Product.objects.filter(
        name__icontains=nom_produit_recherche
    ).values_list('id', flat=True)

    # 2. R√©cup√©rer toutes les pharmacies approuv√©es et associ√©es √† un utilisateur
    # On filtre ici pour ne consid√©rer que les pharmacies valides pour les notifications.
    pharmacies_eligible_a_notifier = Pharmacy.objects.filter(
        is_approved=True, 
        user__isnull=False # S'assure que la pharmacie est li√©e √† un utilisateur Django
    )

    if not produits_correspondants_ids:
        # Cas 1: Le produit recherch√© n'existe PAS DU TOUT dans la base de donn√©es Product.
        # Notifier TOUTES les pharmacies √©ligibles de cette nouvelle demande.
        pharmacies_a_notifier_ce_tour = pharmacies_eligible_a_notifier
        notification_titre = f"Nouvelle demande : '{nom_produit_recherche}'"
        notification_message = f"Un produit tr√®s recherch√©, '{nom_produit_recherche}', n'est actuellement pas r√©pertori√©. Pensez √† l'ajouter et/ou √† le stocker si pertinent."
    else:
        # Cas 2: Le produit existe dans la base de donn√©es Product.
        # Identifier les pharmacies qui POSS√àDENT AU MOINS UN de ces produits.
        pharmacies_ayant_produit_ids = ProductAvailability.objects.filter(
            product__id__in=produits_correspondants_ids,
            pharmacy__in=pharmacies_eligible_a_notifier # Limite la recherche aux pharmacies √©ligibles
        ).values_list('pharmacy__id', flat=True).distinct()

        # Pharmacies √† notifier = Pharmacies √©ligibles - Pharmacies qui ont le produit.
        pharmacies_a_notifier_ce_tour = pharmacies_eligible_a_notifier.exclude(
            id__in=pharmacies_ayant_produit_ids
        )
        notification_titre = f"Produit recherch√©: '{nom_produit_recherche}'"
        notification_message = f"Des utilisateurs recherchent '{nom_produit_recherche}', produit que vous ne poss√©dez pas. Pensez √† le v√©rifier ou √† l'ajouter √† votre stock."

    # 3. Cr√©er des notifications pour les pharmacies identifi√©es, en √©vitant le spam
    notification_type_code = 'produit_recherche'

    for pharmacie in pharmacies_a_notifier_ce_tour:
        user_destinataire = pharmacie.user # R√©cup√®re l'objet User li√© √† la pharmacie

        # V√©rification anti-spam : Cherche si une notification similaire (m√™me type, m√™me produit)
        # a d√©j√† √©t√© envoy√©e √† cette pharmacie/utilisateur r√©cemment.
        # On utilise ici les champs 'pharmacy', 'user', 'type', 'message__icontains' et 'date_creation'.
        recent_notification_exists = Notification.objects.filter(
            pharmacy=pharmacie,
            user=user_destinataire,
            type=notification_type_code,
            message__icontains=nom_produit_recherche, # V√©rifie que la requ√™te de recherche est dans le message
            date_creation__gte=maintenant - timedelta(days=1) # Pas plus d'une fois par jour
        ).exists()

        if not recent_notification_exists:
            # Cr√©ation de la notification si aucune r√©cente n'existe
            Notification.objects.create(
                pharmacy=pharmacie,        # Le champ ForeignKey vers Pharmacy
                user=user_destinataire,    # Le champ ForeignKey vers User
                type=notification_type_code,
                titre=notification_titre,
                message=notification_message,
                lu=False, # Par d√©faut non lue
                # date_creation est auto_now_add=True
                # created_at est auto_now_add=True (vous pourriez vouloir en supprimer un)
            )
