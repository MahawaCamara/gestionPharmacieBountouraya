#### Mes importations ####
from decimal import Decimal
from django.conf import settings
from django.urls import reverse
import openpyxl
from django.db.models.functions import TruncMonth
import json
from django.core.mail import send_mail
from django.utils.timezone import now
from django.http import HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required, user_passes_test
from administrateur.forms import FormForm
from pharmacien.models import Pharmacy
from Produit.models import ProductAvailability, Form, Product
from django.contrib.auth import get_user_model
from abonnement.models import Abonnement
from django.utils import timezone
from django.contrib import messages
from django.db.models import Count, F, ExpressionWrapper, DateField, Sum
from django.db.models.functions import TruncWeek
from datetime import timedelta
from django.core.paginator import Paginator
from django.db.models import Q
from django.utils.html import strip_tags

User = get_user_model()

def admin_required(view_func):
    return user_passes_test(lambda u: u.is_superuser)(view_func)

#### Vue pour gerer la pagination ####
def paginate(request, queryset, per_page=5):
    """Gestion de la pagination pour les objets"""
    paginator = Paginator(queryset, per_page)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return page_obj

####### Vue pour afficher le dashboard admin ###########
@login_required
@admin_required
def dashboard(request):
    # Comptage des √©l√©ments
    pharmacies = Pharmacy.objects.count()
    produits = Product.objects.count()
    utilisateurs = User.objects.count()
    abonnements = Abonnement.objects.count()

    # R√©cup√©rer la date actuelle
    now = timezone.now()
    week_start = now - timedelta(weeks=1)  # Derni√®re semaine uniquement

    # Donn√©es pharmacies par semaine
    pharmacy_data = (
        Pharmacy.objects.filter(created_at__gte=week_start)
        .annotate(week=TruncWeek('created_at'))  # Utilisation de TruncWeek pour regrouper par semaine
        .values('week')
        .annotate(count=Count('id'))
        .order_by('week')
    )

    # Donn√©es produits par semaine
    product_data = (
        Product.objects.filter(created_at__gte=week_start)
        .annotate(week=TruncWeek('created_at'))  # Utilisation de TruncWeek pour regrouper par semaine
        .values('week')
        .annotate(count=Count('id'))
        .order_by('week')
    )

    # Donn√©es abonnements par semaine
    subscription_data = (
        Abonnement.objects.filter(date_debut__gte=week_start)
        .annotate(week=TruncWeek('date_debut'))  # Utilise TruncWeek pour regrouper par semaine
        .values('week')
        .annotate(count=Count('id'))
        .order_by('week')
    )

    # Fonction pour pr√©parer les donn√©es pour Chart.js
    def prepare_chart_data(data):
        # Format des dates de fin de semaine
        labels = [entry['week'].strftime('%Y-%m-%d') for entry in data]  # Format YYYY-MM-DD
        counts = [entry['count'] for entry in data]
        return {'labels': labels, 'data': counts}

    # Pr√©parer les donn√©es pour chaque graphique
    pharmacy_data = prepare_chart_data(pharmacy_data)
    product_data = prepare_chart_data(product_data)
    subscription_data = prepare_chart_data(subscription_data)

    # Affichage du tableau de bord
    return render(request, "admin/dashboard.html", {
        "pharmacies": pharmacies,
        "produits": produits,
        "utilisateurs": utilisateurs,
        "abonnements": abonnements,
        "pharmacy_data": pharmacy_data,
        "product_data": product_data,
        "subscription_data": subscription_data,
    })
  
# Vue d'envoie d'emails aux users bloqu√©s
def send_pharmacy_notification(pharmacy, subject, html_message):
    recipient = pharmacy.email  # üëà email du pharmacien
    plain_message = strip_tags(html_message)
    send_mail(
        subject=subject,
        message=plain_message,
        from_email=settings.DEFAULT_FROM_EMAIL,
        recipient_list=[recipient],
        html_message=html_message,
        fail_silently=False
    )
  
###### Vue pour lister toutes les pharmacies ######    
@login_required
@admin_required
def manage_pharmacies(request):
    search_term = request.GET.get('search', '')
    filter_by = request.GET.get('filter_by', 'pharmacy_name')
    status_term = request.GET.get('status', '')
    
    # Appliquer le filtre selon le champ s√©lectionn√©
    if filter_by == "pharmacy_name":
        pharmacies = Pharmacy.objects.filter(pharmacy_name__icontains=search_term)
    elif filter_by == "address":
        pharmacies = Pharmacy.objects.filter(address__icontains=search_term)
    elif filter_by == "status":
        if status_term == "approved":
            pharmacies = Pharmacy.objects.filter(is_approved=True)
        elif status_term == "not_approved":
            pharmacies = Pharmacy.objects.filter(is_approved=False)
        else:
            pharmacies = Pharmacy.objects.all()

    pharmacies = pharmacies.select_related("user")
    
    # Pagination
    page_obj = paginate(request, pharmacies, 5)
    return render(request, "admin/pharmaciens.html", {"page_obj": page_obj, "search_term": search_term, "filter_by": filter_by, "status_term": status_term})

############ Vue pour approuver une pharmacie ############
@login_required
@admin_required
def approve_pharmacy(request, id):
    pharmacy = get_object_or_404(Pharmacy, id=id)
    pharmacy.is_approved = not pharmacy.is_approved
    pharmacy.save()

    if pharmacy.email:
        if pharmacy.is_approved:
            subject = "Pharmacie approuv√©e - PharmaConnect"
            html_message = f"""
            <div style="font-family: Arial; padding: 20px;">
                <h2 style="color: #28a745;">Pharmacie approuv√©e</h2>
                <p>Bonjour <strong>{pharmacy.pharmacy_name}</strong>,</p>
                <p>Nous sommes heureux de vous informer que votre pharmacie a √©t√© <strong>approuv√©e</strong> sur la plateforme <strong>PharmaConnect</strong>.</p>
                <p>Vous pouvez d√©sormais publier vos produits et b√©n√©ficier de tous les services offerts.</p>
                <p>Merci de votre confiance.</p>
                <p>Cordialement,<br><strong>L'√©quipe PharmaConnect</strong></p>
            </div>
            """
            messages.success(request, "La pharmacie a √©t√© approuv√©e avec succ√®s.")
        else:
            subject = "Pharmacie d√©sapprouv√©e - PharmaConnect"
            html_message = f"""
            <div style="font-family: Arial; padding: 20px;">
                <h2 style="color: #dc3545;">Pharmacie d√©sapprouv√©e</h2>
                <p>Bonjour <strong>{pharmacy.pharmacy_name}</strong>,</p>
                <p>Votre pharmacie a √©t√© temporairement <strong>d√©sapprouv√©e</strong> par notre √©quipe.</p>
                <p>Les motifs possibles sont :</p>
                <ul>
                    <li>Informations manquantes ou incorrectes</li>
                    <li>Probl√®mes de conformit√©</li>
                </ul>
                <p>Merci de v√©rifier et compl√©ter votre profil si n√©cessaire.</p>
                <p>Pour toute question, contactez-nous √† <a href="mailto:pharmaconnect200@gmail.com">pharmaconnect200@gmail.com</a>.</p>
                <p>Cordialement,<br><strong>L'√©quipe PharmaConnect</strong></p>
            </div>
            """
            messages.warning(request, "La pharmacie a √©t√© d√©sapprouv√©e.")

        send_pharmacy_notification(pharmacy, subject, html_message)

    return redirect('administration:manage_pharmacies')

############ Vue pour supprimer une pharmacie ############
@login_required
@admin_required
def delete_pharmacy(request, id):
    pharmacy = get_object_or_404(Pharmacy, id=id)
    user = pharmacy.user
    email = pharmacy.email
    name = pharmacy.pharmacy_name

    # Email avant suppression
    subject = "Suppression de votre pharmacie - PharmaConnect"
    html_message = f"""
    <div style="font-family: Arial; padding: 20px;">
        <h2 style="color: #dc3545;">Pharmacie supprim√©e</h2>
        <p>Bonjour <strong>{name}</strong>,</p>
        <p>Votre pharmacie a √©t√© <strong style="color:red;">supprim√©e</strong> de notre plateforme <strong>PharmaConnect</strong>.</p>
        <p>Raisons possibles :</p>
        <ul>
            <li>Donn√©es inexactes ou non v√©rifi√©es</li>
            <li>Produits non conformes</li>
            <li>Violation des conditions d'utilisation</li>
        </ul>
        <p>Pour toute question, contactez : <a href="mailto:pharmaconnect200@gmail.com">pharmaconnect200@gmail.com</a>.</p>
        <p><strong>L'√©quipe PharmaConnect</strong></p>
    </div>
    """
    send_pharmacy_notification(pharmacy, subject, html_message)

    # Supprimer produits puis compte
    Product.objects.filter(created_by=pharmacy).delete()
    pharmacy.delete()
    user.delete()

    messages.success(request, "Pharmacie et ses produits supprim√©s avec succ√®s.")
    return redirect("administration:manage_pharmacies")

############ Vue pour export les donn√©es de la pharmacie en excel ############
@login_required
@admin_required
def export_pharmacies_excel(request):
    # R√©cup√©rer les filtres comme dans manage_pharmacies pour exporter la m√™me liste
    search_term = request.GET.get('search', '')
    filter_by = request.GET.get('filter_by', 'pharmacy_name')
    status_term = request.GET.get('status', '')

    if filter_by == "pharmacy_name":
        pharmacies = Pharmacy.objects.filter(pharmacy_name__icontains=search_term)
    elif filter_by == "address":
        pharmacies = Pharmacy.objects.filter(address__icontains=search_term)
    elif filter_by == "status":
        if status_term == "approved":
            pharmacies = Pharmacy.objects.filter(is_approved=True)
        elif status_term == "not_approved":
            pharmacies = Pharmacy.objects.filter(is_approved=False)
        else:
            pharmacies = Pharmacy.objects.all()
    else:
        pharmacies = Pharmacy.objects.all()

    # Cr√©ation du classeur Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Pharmacies"

    # √âcrire l'en-t√™te
    headers = ["Nom", "Adresse", "T√©l√©phone", "Email", "Statut"]
    ws.append(headers)

    # √âcrire les donn√©es
    for p in pharmacies:
        statut = "Approuv√©e" if p.is_approved else "Non approuv√©e"
        ws.append([p.pharmacy_name, p.address, p.phone_number, p.email, statut])

    # Ajuster la largeur des colonnes (optionnel)
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter  # Get the column name
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = (max_length + 2)
        ws.column_dimensions[column].width = adjusted_width

    # Pr√©parer la r√©ponse HTTP
    response = HttpResponse(
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
    response["Content-Disposition"] = 'attachment; filename="pharmacies.xlsx"'

    wb.save(response)
    return response

# Gestions des produits
############ Vue pour lister tous les produits ############
@login_required
@admin_required
def manage_products(request):
    search_term = request.GET.get('search', '')
    filter_by = request.GET.get('filter_by', '')

    # Filtrage selon le choix de l'utilisateur
    if filter_by == 'name':
        produits = Product.objects.filter(name__icontains=search_term)
    elif filter_by == 'type':
        produits = Product.objects.filter(type__icontains=search_term)
    elif filter_by == 'price':
        produits = Product.objects.filter(price__icontains=search_term)  # On pourrait ajouter un filtre pour le prix si n√©cessaire
    else:
        produits = Product.objects.all()

    # Pagination (5 produits par page)
    paginator = Paginator(produits, 5)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    # Ajouter le prix du produit depuis ProductAvailability
    product_data = []
    for product in page_obj:
        # Obtenir le prix associ√© au produit √† partir de ProductAvailability
        availability = ProductAvailability.objects.filter(product=product).first()
        price = availability.price if availability else "N/A"
        product_data.append({
            'product': product,
            'price': price,
        })

    return render(request, "admin/produits.html", {
        "page_obj": page_obj,
        "product_data": product_data,
        "search_term": search_term,
        "filter_by": filter_by,
    })

############ Vue pour supprimer un produit  ############
@login_required
@admin_required
def delete_product(request, id):
    produit = get_object_or_404(Product, id=id)
    pharmacy = produit.created_by

    subject = "Suppression d‚Äôun produit - PharmaConnect"
    html_message = f"""
    <div style="font-family: Arial; padding: 20px;">
        <h2 style="color: #dc3545;">Produit supprim√©</h2>
        <p>Bonjour <strong>{pharmacy.pharmacy_name}</strong>,</p>
        <p>Le produit <strong style="color:#007bff;">{produit.name}</strong> a √©t√© <strong>supprim√©</strong> par l'administration.</p>
        <p>Motifs possibles :</p>
        <ul>
            <li>Produit mal d√©crit ou erron√©</li>
            <li>Non conforme √† la r√©glementation</li>
            <li>Date de p√©remption proche ou d√©pass√©e</li>
        </ul>
        <p>Pour plus de d√©tails, contactez : <a href="mailto:pharmaconnect200@gmail.com">pharmaconnect200@gmail.com</a>.</p>
        <p><strong>L'√©quipe PharmaConnect</strong></p>
    </div>
    """
    send_pharmacy_notification(pharmacy, subject, html_message)

    produit.delete()
    messages.success(request, "Produit supprim√© avec succ√®s.")
    return redirect('administration:manage_products')

############ Vue pour exporter le fichier excel  ############
@login_required
def export_products_excel(request):
    search = request.GET.get('search', '')
    filter_by = request.GET.get('filter_by', '')

    products = Product.objects.all()

    # Filtrage selon recherche et filtre choisi
    if search:
        if filter_by == 'name':
            products = products.filter(name__icontains=search)
        elif filter_by == 'type':
            products = products.filter(type__icontains=search)
        elif filter_by == 'price':
            # On filtre sur au moins une disponibilit√© avec ce prix
            products = products.filter(availabilities__price__icontains=search).distinct()
        else:
            # Recherche g√©n√©rale sur nom, type, description
            products = products.filter(
                Q(name__icontains=search) |
                Q(type__icontains=search) |
                Q(description__icontains=search)
            )

    products = products.order_by('-created_at')

    # Cr√©ation du fichier Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Liste des produits"

    # En-t√™te colonnes
    ws.append([
        "Nom",
        "Type",
        "Description",
        "Mode d'utilisation",
        "Posologie",
        "Date d'expiration",
        "Date d'ajout",
        "Pharmacie",
        "Disponibilit√©s (forme, dosage, prix)"
    ])

    # Remplissage des donn√©es
    for product in products:
        disponibilites = []
        for dispo in product.availabilities.all():
            dispo_str = f"{dispo.form.name} {dispo.dosage} - {dispo.price} FNG"
            disponibilites.append(dispo_str)
        disponibilites_text = "; ".join(disponibilites) if disponibilites else "Aucune"

        ws.append([
            product.name,
            product.type,
            product.description,
            product.usage_mode,
            product.posology,
            product.expiration_date.strftime("%d/%m/%Y") if product.expiration_date else '',
            product.created_at.strftime("%d/%m/%Y"),
            product.created_by.pharmacy_name if product.created_by else '',
            disponibilites_text,
        ])

    # Pr√©paration de la r√©ponse HTTP
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = 'attachment; filename=produits.xlsx'

    wb.save(response)
    return response

############ Vue pour ajouter une nouvelle forme ############
@login_required
@admin_required
def manage_forms(request):
    forms_qs = Form.objects.all().order_by('name')  # Trie par nom
    paginator = Paginator(forms_qs, 5)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    edit_id = request.GET.get('edit_id')
    form_instance = None
    if edit_id:
        form_instance = get_object_or_404(Form, id=edit_id)

    if request.method == 'POST':
        post_edit_id = request.POST.get('edit_id')
        if post_edit_id:
            form_instance = get_object_or_404(Form, id=post_edit_id)
            form = FormForm(request.POST, instance=form_instance)
        else:
            form = FormForm(request.POST)

        if form.is_valid():
            name = form.cleaned_data['name'].strip().lower()
            qs = Form.objects.filter(name__iexact=name)
            if form_instance:
                qs = qs.exclude(id=form_instance.id)
            if qs.exists():
                messages.error(request, "Cette forme pharmaceutique existe d√©j√†.")
            else:
                form.save()
                messages.success(request, "Forme modifi√©e avec succ√®s." if form_instance else "Forme ajout√©e avec succ√®s.")
                return redirect('administration:manage_forms')
        else:
            messages.error(request, "Veuillez corriger les erreurs du formulaire.")
    else:
        form = FormForm(instance=form_instance)

    return render(request, "admin/formes.html", {
        "page_obj": page_obj,
        "form": form,
        "is_edit": bool(edit_id),
        "edit_id": edit_id,
    })

############ Vue pour supprimer une forme ############
@login_required
@admin_required
def delete_form(request, id):
    form = get_object_or_404(Form, id=id)
    form.delete()
    messages.success(request, "Forme pharmaceutique supprim√©e avec succ√®s.")
    return redirect('administration:manage_forms')

############ Vue pour lister les pharmaciens abonn√©s ############
@login_required
@admin_required
def manage_subscriptions(request):
    abonnements_list = Abonnement.objects.select_related("user__pharmacy", "formule").order_by('-date_debut')
    paginator = Paginator(abonnements_list, 5)  # 5 abonnements par page
    page = request.GET.get("page")
    abonnements = paginator.get_page(page)
    return render(request, "admin/abonnements.html", {"abonnements": abonnements})

############ Vue pour activer ou desactiver un abonnement ############
@login_required
@admin_required
def toggle_abonnement(request, id):
    abonnement = get_object_or_404(Abonnement, id=id)
    abonnement.est_actif = not abonnement.est_actif
    abonnement.save()
    statut = "activ√©" if abonnement.est_actif else "d√©sactiv√©"

    # Trouver la pharmacie associ√©e √† l'utilisateur de l'abonnement
    try:
        pharmacy = Pharmacy.objects.get(user=abonnement.user)
    except Pharmacy.DoesNotExist:
        pharmacy = None

    # Si abonnement d√©sactiv√©, envoie un mail √† la pharmacie
    if not abonnement.est_actif and pharmacy:
        subject = "D√©sactivation de votre abonnement - PharmaConnect"
        html_message = f"""
        <div style="font-family: Arial, sans-serif; padding: 20px; color: #333;">
            <h2 style="color: #dc3545;">Abonnement d√©sactiv√©</h2>
            <p>Bonjour <strong>{pharmacy.pharmacy_name}</strong>,</p>
            <p>Votre abonnement a √©t√© <strong>d√©sactiv√©</strong> sur <strong>PharmaConnect</strong>.</p>
            <p>Les raisons possibles :</p>
            <ul>
                <li>Expiration de la p√©riode d‚Äôabonnement</li>
                <li>Non-respect des conditions d'utilisation</li>
                <li>Demande de l'administration</li>
            </ul>
            <p>Pour toute question ou pour renouveler votre abonnement, merci de contacter notre support : 
               <a href="mailto:pharmaconnect200@gmail.com">pharmaconnect200@gmail.com</a>.</p>
            <p><strong>L‚Äô√©quipe PharmaConnect</strong></p>
        </div>
        """
        send_mail(
            subject,
            '',
            settings.DEFAULT_FROM_EMAIL,
            [pharmacy.email],
            html_message=html_message,
            fail_silently=True,
        )

    messages.success(request, f"L'abonnement a √©t√© {statut} avec succ√®s.")
    return redirect('administration:manage_subscriptions')

############ Vue pour exporter la liste des abonn√©s en excel ############
@login_required
@admin_required
def export_abonnements_excel(request):
    abonnements = Abonnement.objects.select_related('user', 'formule')
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Abonnements"
    ws.append([
        "Utilisateur", "Email", "Formule", "Prix", "Date D√©but", "Date Fin", "Statut"
    ])

    for ab in abonnements:
        ws.append([
            ab.user.get_full_name(),
            ab.user.email,
            ab.formule.nom,
            f"{ab.formule.prix} GNF",
            ab.date_debut.strftime("%d/%m/%Y %H:%M"),
            ab.date_expiration.strftime("%d/%m/%Y %H:%M") if ab.date_expiration else "",
            "Actif" if ab.est_valide else "Inactif"
        ])

    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = 'attachment; filename="abonnements.xlsx"'
    wb.save(response)
    return response

############ Vue pour afficher tous les produits expir√©s ############
@login_required
@admin_required
def expired_products(request):
    query = request.GET.get('q', '')

    produits = Product.objects.filter(expiration_date__lt=timezone.now())

    if query:
        produits = produits.filter(
            Q(name__icontains=query) | Q(created_by__pharmacy_name__icontains=query)
        )
    
    paginator = Paginator(produits.order_by('expiration_date'), 5)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, "admin/produits_expir√©s.html", {
        "produits": page_obj,
        "query": query
    })

############ Vue pour exporter la liste des produits perim√©s en excel ############
@login_required
@admin_required
def export_expired_products_excel(request):
    produits = Product.objects.filter(expiration_date__lt=timezone.now()).order_by('expiration_date')

    # Cr√©ation du classeur Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Produits Expir√©s"

    # Ent√™tes
    headers = ["Nom du Produit", "Pharmacie", "Date d'Expiration"]
    ws.append(headers)

    # Remplir les donn√©es
    for produit in produits:
        ws.append([
            produit.name,
            produit.created_by.pharmacy_name,
            produit.expiration_date.strftime("%d/%m/%Y") if produit.expiration_date else ""
        ])

    # Ajuster la largeur des colonnes
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter  # lettre colonne, ex 'A'
        for cell in col:
            try:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            except:
                pass
        adjusted_width = max_length + 2
        ws.column_dimensions[column].width = adjusted_width

    # Pr√©parer la r√©ponse HTTP
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    )
    response['Content-Disposition'] = 'attachment; filename=produits_expir√©s.xlsx'
    wb.save(response)
    return response
User = get_user_model()

####### Vue pour lister tous les utilisateurs ########
@login_required
@admin_required
def all_users(request):
    query = request.GET.get('q', '')
    users_qs = User.objects.filter(is_superuser=False)  # Exclure admin

    if query:
        users_qs = users_qs.filter(
            Q(email__icontains=query) |
            Q(first_name__icontains=query) |
            Q(last_name__icontains=query)
        )

    paginator = Paginator(users_qs.order_by('-date_joined'), 5)
    page_number = request.GET.get('page')
    users_page = paginator.get_page(page_number)

    return render(request, 'admin/tous_les_utilisateurs.html', {
        'users': users_page,
        'query': query,
        'page_title': "Tous les utilisateurs",
    })

##### Vue pour bloquer un utilisateur et l'envoyer un email ####
@login_required
@admin_required
def block_user(request, user_id):
    user = get_object_or_404(User, id=user_id)

    # Basculer l'√©tat actif/inactif
    user.is_active = not user.is_active
    user.save()

    # D√©terminer si c'est un pharmacien
    try:
        pharmacy = user.pharmacy  # Si OneToOneField dans Pharmacy
    except Pharmacy.DoesNotExist:
        pharmacy = None

    if user.is_active:
        messages.success(request, f"L'utilisateur {user.get_full_name() or user.username} a √©t√© d√©bloqu√©.")
    else:
        messages.warning(request, f"L'utilisateur {user.get_full_name() or user.username} a √©t√© bloqu√©.")

        # Si c'est un pharmacien, envoie d'email
        if pharmacy:
            subject = "Blocage de votre compte - PharmaConnect"
            html_message = f"""
                <div style="font-family: Arial; padding: 20px;">
                    <h2 style="color: #dc3545;">Compte bloqu√©</h2>
                    <p>Bonjour <strong>{pharmacy.pharmacy_name}</strong>,</p>
                    <p>Votre compte sur la plateforme <strong>PharmaConnect</strong> a √©t√© <strong style="color: red;">bloqu√©</strong> par l'administration.</p>
                    <p>Cette d√©cision a √©t√© prise en raison d'une activit√© non conforme √† nos r√®gles, ou suite √† des v√©rifications administratives.</p>
                    <p>Pour toute r√©clamation, veuillez nous contacter √† <a href="pharmaconnect200@gmail.com">pharmaconnect200@gmail.com</a></p>
                    <p>Cordialement,<br><strong>L'√©quipe PharmaConnect</strong></p>
                </div>
            """
            send_pharmacy_notification(pharmacy, subject, html_message)

    # Rediriger selon l'origine
    if pharmacy:
        return redirect("administration:all_users")
    return redirect("administration:all_users")

##### Vue pour debloquer un utilisateur et l'envoyer un email ####
@login_required
@admin_required
def unblock_user(request, user_id):
    user = get_object_or_404(User, id=user_id)

    if not user.is_active:
        user.is_active = True
        user.save()

        messages.success(request, f"L'utilisateur {user.get_full_name() or user.username} a √©t√© d√©bloqu√©.")

        # V√©rifier si utilisateur est pharmacien
        try:
            pharmacy = user.pharmacy
        except Pharmacy.DoesNotExist:
            pharmacy = None

        if pharmacy:
            subject = "D√©blocage de votre compte - PharmaConnect"
            html_message = f"""
                <div style="font-family: Arial; padding: 20px;">
                    <h2 style="color: #198754;">Compte d√©bloqu√©</h2>
                    <p>Bonjour <strong>{pharmacy.pharmacy_name}</strong>,</p>
                    <p>Bonne nouvelle ! Votre compte <strong>PharmaConnect</strong> a √©t√© <strong style="color: green;">d√©bloqu√©</strong>.</p>
                    <p>Vous pouvez maintenant vous reconnecter √† la plateforme et continuer vos activit√©s.</p>
                    <p>Merci pour votre patience.</p>
                    <p>Cordialement,<br><strong>L'√©quipe PharmaConnect</strong></p>
                </div>
            """
            send_pharmacy_notification(pharmacy, subject, html_message)
    else:
        messages.info(request, f"L'utilisateur {user.get_full_name() or user.username} est d√©j√† actif.")

    return redirect("administration:all_users")

############ Vue pour exporter la liste des utilisateurs bloqu√©s en excel ############
@login_required
@admin_required
def export_blocked_users_excel(request):
    query = request.GET.get('q', '')
    users_qs = User.objects.filter(is_active=False).exclude(is_superuser=True)
    if query:
        users_qs = users_qs.filter(
            Q(email__icontains=query) |
            Q(first_name__icontains=query) |
            Q(last_name__icontains=query)
        )
    users = users_qs.order_by('-date_joined')

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Utilisateurs Bloqu√©s"

    # Ent√™tes colonnes
    ws.append(["Nom", "Email", "Date d'inscription"])

    # Donn√©es
    for user in users:
        nom = user.get_full_name() or user.email
        ws.append([nom, user.email, user.date_joined.strftime("%d/%m/%Y %H:%M")])

    # Pr√©parer la r√©ponse HTTP avec fichier Excel
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = 'attachment; filename=utilisateurs_bloques.xlsx'
    wb.save(response)
    return response

##### Vue pour la statistique globale #######
@login_required
@admin_required
def statistics(request):
    # G√©n√©rer les 6 derniers mois (par exemple)
    current_month = timezone.now().replace(day=1)
    months = [(current_month - timezone.timedelta(days=30 * i)).strftime("%B") for i in reversed(range(6))]

    # Abonnements par mois
    abonnements = (
        Abonnement.objects.annotate(month=TruncMonth("date_debut"))
        .values("month")
        .annotate(total=Count("id"))
        .order_by("month")
    )

    # Pharmacies approuv√©es par mois
    pharmacies = (
        Pharmacy.objects.filter(is_approved=True)
        .annotate(month=TruncMonth("created_at"))
        .values("month")
        .annotate(total=Count("id"))
        .order_by("month")
    )

    # Revenus mensuels : somme des prix des abonnements valides
    revenus = (
        Abonnement.objects.filter(est_actif=True, date_expiration__gte=now())
        .annotate(month=TruncMonth("date_debut"))
        .values("month")
        .annotate(total=Sum("formule__prix"))
        .order_by("month")
    )

    # Helper pour formatter les r√©sultats
    def get_month_data(queryset):
        data_dict = {entry["month"].strftime("%B"): entry["total"] for entry in queryset}
        return [data_dict.get(month, 0) for month in months]

    def get_month_revenus(queryset):
        data_dict = {entry["month"].strftime("%B"): entry["total"] for entry in queryset}
        return [float(data_dict.get(month, 0) or 0) for month in months]

    context = {
        "months": json.dumps(months),
        "abonnements_per_month": json.dumps(get_month_data(abonnements)),
        "pharmacies_per_month": json.dumps(get_month_data(pharmacies)),
        "revenus_per_month": json.dumps(get_month_revenus(revenus)),
    }

    return render(request, "admin/statistiques.html", context)

##### Vue pour afficher la page profile #######
@login_required
@user_passes_test(lambda u: u.is_staff)
def admin_profile(request):
    user = request.user
    return render(request, 'admin/admin_profile.html', {
        'user': user,
    })